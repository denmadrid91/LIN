mutex mtx;                        /*Garantiza exclusion mutua del buffer*/
condvar prod,cons;                /*Bloquea o desbloque los productores o consumidores segun sea necesario*/
int prod_count=0,cons_count=0;    /*Numero de productores y consumidores actualmente*/
cbuffer_t* cbuffer;               /*Recurso compartido implementado como buffer circular*/

void fifoproc_open(bool abre_para_lectura) {
	lock(mtx);
		if(abre_para_lectura) {
			cons_count++;
			cond_signal(prod);
			while(prod_count==0)
				cond_wait(cons,mtx);
		}
		else {
			prod_count++;
			cond_signal(cons);
			while(cons_count==0)
				cond_wait(prod,mtx);
		}
	unlock(mtx);
}

int fifoproc_write(char* buff, int len) {
	char kbuffer[MAX_KBUF];

	if(len > MAX_CBUFFER_LEN || len>MAX_KBUF) { return Error;}
	if(copy_from_user(kbuffer, buff, len)) {return Error;}

	lock(mtx);
		while(nr_gaps_cbuffer_t(cbuffer)<len && cons_count>0) {
			cond_wait(prod,mtx);
		}

		if (cons_count==0) {unlock(mtx); return -EPIPE;}

		insert_items_cbuffer_t(cbuffer,kbuffer,len);

		cond_signal(cons);
	unlock(mtx);
	return len;
}

int fifoproc_read(const char* buff, int len) {
	char kbuffer[MAX_KBUF];
	
	if(len > MAX_CBUFFER_LEN || len>MAX_KBUF) { return Error;}
	lock(mtx);
		while(size_cbuffer_t(cbuffer)==0 && prod_count>0) {
			cond_wait(cons,mtx);
		}
		
		if ((prod_count==0)&&(size_cbuffer_t(cbuffer)==0)) {unlock(mtx); return 0;}

		remove_items_cbuffer_t(cbuffer, kbuffer, len);
		cond_signal(prod);
	unlock(mtx);
	copy_to_user(buff, kbuffer, strlen(kbuffer));
	return strlen(kbuffer);
}

void fifoproc_release(bool lectura) {
	lock(mtx);
		if(lectura) {
			cons_count--;
			cond_signal(prod);
		}

		else {
			prod_count--;
			cond_signal(cons);
		}

		if((prod_count ==0) && (cons_count ==0))
			clear_cbuffer_t(cbuffer);
	unlock(mtx);
}
